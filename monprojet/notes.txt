Mes notes:

support:
https://www.youtube.com/watch?v=Z4D3M-NSN58&list=PLzMcBGfZo4-kQkZp-j9PNyKq7Yw5VYjq9

étapes:

I- Initialisation

0- installer django: pip install django

1- créer un projet (monprojet) 'django-admin startproject monprojet'
On trouve un fichiers et un dossier:
le fichier 'manager.py' nous permet  de lancer le serveur, gestion de bd et plein de choses
et on a le dossier 'monprojet' dans lequel on trouve d'autres fichiers
notamment:
'__init__' qui indique que le projet est équivalent a un package
'asgi' & 'wsgi' a ne pas s'en soucier
'settings' parametres, on peut configurer le type de bd par exemple
'urls' ou on déclare les urls de base (/ ou /admin)
-> on a crée un projet
un projet est constitué d'une ou plusieurs applications, une application
c'est de la logique pour une partie de notre 'application web' par exemple
une application pour le login, une autre pour le menu principal

2- créer une application
'python manage.py startapp monapp'
l'application comporte aussi plein de fichiers:
'__init__' deja expliqué
'views' contient des fonctions qui retournent les "views" cad une fonction
qui retourne une interface/page web

3- on crée un fichier 'urls.py'
dans ce fichier on va mettre l'url correspendante a chaque view exemple:
urlpatterns = [path("", views.index, name="LaViewIndex")], normalment
ici la view index qu'on a déclaré dans views (retournée par la fonction index)
sera accessible par l'url "" (vide) et nommée LaViewIndex

4- on modifie le fichier 'urls.py' du projet (pas celui qu'on a crée)
je suppose que ces urls sont la base, cad les touts premiers caracteres
qu'on peut saisir dans l'url, puis elle peut etre suivie de n'importe
quel mot present dans les urls d'une application exemple, la base ici c:
"
urlpatterns = [
path("admin/", admin.site.urls),
path("", include('monapp.urls')) #peut etre suivie par les urls definis dans l'app
]
"

5- passer a une autre page en utilisant l'url;
si les étapes et commentaires précedants sont claires, cette étape devrait etre
facile, voici ce qu'on fait:
D'abbord on ajoute une view (fonction qui retourne une iterface) dans le fichier
views.py par exemple:
"
def page2(request):
    return HttpResponse("Voici une autre page!")
"
ensuite on lui attribut une interface dans url.py (de l'appli bien sure, on
n'a plus a se soucier de url.py du projet pour l'instant)
on ajoute le path:
"
    path('page2/', views.page2, name='page2'),
"
ca marche

II- Base de données

1- ajouter une ligne a settings.py:
dans settings.py il y a une liste INSTALLED_APPS, ajouter la ligne suivante:
'nom_de_lapplication.apps.Nom_de_lapplicationConfig', exemple
'monapp.apps.MonappConfig', (de préference utiliser les quotes '' et
respecter les majuscules dans MonappConfig)
on l'ajoute pour indquer a django les applications qui ont des dependences
de la base de données pour qu'ils soient mis a jour (cette partie est deja
expliquée a l'étape 3 mais je ne vais pas la supprimer: puis on execute la
commande suivante au niveau du dossier monapp (cad executer la cmnd dans le
dossier de l'application): "python manage.py migrate")

2- executer la commande de migration
au niveau du dossier du projet (non pas le package qui a le meme not du
projet) executer cette commande: 'python manage.py migrate'
je crois quee c'a n'a pas tjrs d'effets

3- creer des models (classes)
au niveau du fichier models.py de l'application par exemple:
"
from django.db import models
class ToDoList(models.Model): #hérite de models.Model
    name = models.CharField(max_lenght=200)

    def __str__(self):  #l'equivalent de toString en java
        return self.name

class Item(models.Model):
    todolist = models.ForeignKey(ToDoList, on_delete=models.CASCADE)
    ''' cette ligne veut dire que cet attribut n'est pas de type
    standard comme int string..., foreignkey veut dire clé étrangère
    normalment et le truc de onDelete je suppose que c un truc du
    genre composition '''
"
=> On a donc crée deux classes

4- Alerter django de la modification des classes et les enregistrer
dans cd meme dossier (dans notre exemple: ../monprojet)
executer cette commande:
python manage.py makemigrations nom_de_lapplication
'python manage.py makemigrations monapp' ds notre ex
On peut faire l'analogie de cette commande avec 'commit' dans git
on enregistre les changements
maintenant l'equivalent de push de git c "python manage.py migrate"
(effectuer la commande dans le meme chemain /monprojet)

5- ajouter des elements a la BD
pour executer des queries:
dans le meme dossier (qui contient manage.py)
'python manage.py shell'
--------PART I-------commandes et fonctionalités---------
'quit()' pour quitter shell
Rq: on peut executer nimporte quel ligne python valide par exemple print
'from monapp.models import Item, ToDoList' importer les classes qu'on
aimerait manipuler du dossier monapp, normalment si on etait dedans (dossier
monapp) on ne devrait pas spécifier monapp.models
'truc = Truc(parametre1="p1", parametre2="p2")' creer une instance de Truc
exemple: 'p1 = Personne(nom="Jhon", prenom="Doe")'
'p1.save()' p1 a été enregistré dans la bd
'personnes = Personne.objects.all()' personnes contient toutes les personnes
sauvgardées en bd, maintnant on peut les afficher pour voir: print(personnes)
'ToDoList.objects.get(condition)' retourne les objects sauvgardés qui
satisfaient la condition
ou on aurait pu faire 'TDLs.get(condition)'
par condition je veux dire par exemple nom="Jhon" ou bien id=2...
'p1.delete()' 'p2.delete()' 'personnes.delete()' supprimer
'personnes.filter(nom__startswith="Mohammed")' ou bien
'personnes.filter(id=5)' ceci est utile contre les exceptons
Il y aurait normalment une deuxieme partie pour les commandes
(--------PART II-------commandes et fonctionalités---------)

6- Ajouter un admin pour visualiser le contenu de la bd
Pour visualiser les changements d'abord on doit créer un superuser
(administrateur):
'python manage.py createsuperuser'
puis donner le nom et mdp
appres on peut lancer le serveur de nouveau et tester le profil
apres il faut accorder l'access a la bd au dashboard (l'interface)
comme ceci:
Dans admin.py
on importe les classes (model) dont on a besoin:
from .models import la_ou_les_class
#aussi:
admin.site.register(la_class)
--> Afin de pratiquer, voici un guide etape par etape pour effacer
une application du projet
--> Retirer l'application de INSTALLED_APPS dans le fichier settings
--> Pas sure mais executer 'python manage.py migrate monapp zero'
--> Supprimer les fichiers de l'application

III- Templates:

1- Créer les dossiers nécessaires:
Dans l'application concernée créer un dossier 'Templates' (vérifier
l'orthographe) dans ce dossier créer un dossier qui a exactement le
meme nom que l'application, dans ce dossier on va mettre nos fichiers
html :)

REMARQUE:
je crois que je devrais apprendre flask plutot :)